{"version":3,"file":"static/js/519.294f7fa1.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/errorMessage.jsx","hooks/useHttp.js","components/comicsList/ComicsList.js","pages/ComicsPage.jsx","services/MarvelServices.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import React from 'react';\r\nimport img from \"./error.gif\";\r\n\r\nconst ErrorMessage = ({error}) => {\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\", padding: \"5px 10px\"}}>\r\n            <p style={{fontSize: \"24px\", color: \"red\"}}>{error}</p>\r\n            <img\r\n                style={{\r\n                    display: \"block\",\r\n                    width: \"250px\",\r\n                    height: \"250px\",\r\n                    objectFit: \"contain\",\r\n                    margin: \"0 auto\"\r\n                }}\r\n                src={img} alt=\"ErrorPage message\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = (callback) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const fetching = useCallback(async (...args) => {\r\n        try {\r\n            setLoading(true);\r\n            await callback(...args);\r\n        } catch (e) {\r\n            setError(e.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(\"\"), []);\r\n\r\n    return [fetching, loading, error, clearError];\r\n}","import React, {useEffect, useState} from \"react\";\nimport './comicsList.scss';\nimport {useHttp} from \"../../hooks/useHttp\";\nimport MarvelServices from \"../../services/MarvelServices\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport {Link, Outlet} from \"react-router-dom\";\n\nconst ComicsList = () => {\n    const [comics, setComics] = useState([]);\n    const [limit, setLimit] = useState(8);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [comicsFetching, loading, error] = useHttp(async (limit = 8, offset = 210, initial = false) => {\n        initial ? setNewComicsLoading(false) : setNewComicsLoading(true);\n        const comics = await MarvelServices.getAllComics(limit, offset);\n        setNewComics(comics);\n        setNewComicsLoading(false);\n    });\n\n    useEffect(() => {\n        comicsFetching(limit, offset, true);\n    }, []);\n\n    const setNewComics = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComics(comics => [...comics, ...newComicsList]);\n        setOffset(offset => offset + limit);\n        setComicsEnded(ended);\n    }\n\n    const errorMessage = error ? <ErrorMessage error={error}/> : null;\n    const spinner = loading && !newComicsLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            <ul className=\"comics__grid\">\n                {comics.map((comicBook, index) => {\n                    return (\n                        <li className=\"comics__item\" key={index}>\n                            <Link to={`${comicBook.id}`}>\n                                <img src={comicBook.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                                <div className=\"comics__item-name\">{comicBook.title}</div>\n                                <div className=\"comics__item-price\">{comicBook.price}</div>\n                            </Link>\n                        </li>\n                    )\n                })}\n            </ul>\n            <button\n                className=\"button button__main button__long\"\n                disabled={newComicsLoading}\n                style={{display: comicsEnded ? \"none\" : \"block\"}}\n                onClick={() => comicsFetching(limit, offset, false)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import React from \"react\";\r\nimport AppBanner from \"../components/appBanner/AppBanner\";\r\nimport ComicsList from \"../components/comicsList/ComicsList\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Page with list of our comics\" />\r\n                <title>Comics page </title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;\r\n","import axios from \"axios\";\r\n\r\nexport default class MarvelServices {\r\n    static _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    static _apiKey = \"apikey=14c80cf078481fb3ded0db419a38bd66\";\r\n\r\n    static async getCharacters(limit = 9, offset = 210) {\r\n        const response = await axios.get(\r\n            `${MarvelServices._apiBase}characters?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`\r\n        );\r\n        return response.data.data.results.map((character) => MarvelServices._transformCharacter(character));\r\n    }\r\n\r\n    static async getCharacter(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters/${id}?${MarvelServices._apiKey}`);\r\n        return MarvelServices._transformCharacter(response.data.data.results[0]);\r\n    }\r\n\r\n    static async getCharacterByName(name) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters?name=${name}&${MarvelServices._apiKey}`);\r\n        return response.data.data.results;\r\n    }\r\n\r\n    static async getAllComics(limit = 8, offset = 210) {\r\n        const response = await axios.get(\r\n            `${MarvelServices._apiBase}comics?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`\r\n        );\r\n        return response.data.data.results.map((comics) => MarvelServices._transformComics(comics));\r\n    }\r\n\r\n    static async getComics(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}comics/${id}?${MarvelServices._apiKey}`);\r\n        return MarvelServices._transformComics(response.data.data.results[0]);\r\n    }\r\n\r\n    static _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items,\r\n        };\r\n    };\r\n\r\n    static _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            issueNumber: comics.issueNumber,\r\n            description: comics.description,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price,\r\n            pageCount: comics.pageCount,\r\n        };\r\n    };\r\n}\r\n"],"names":["className","src","avengers","alt","avengersLogo","error","style","display","flexDirection","alignItems","padding","fontSize","color","width","height","objectFit","margin","img","useHttp","callback","useState","loading","setLoading","setError","fetching","useCallback","message","comics","setComics","limit","offset","setOffset","comicsEnded","setComicsEnded","newComicsLoading","setNewComicsLoading","initial","MarvelServices","setNewComics","comicsFetching","useEffect","newComicsList","ended","length","errorMessage","spinner","Spinner","map","comicBook","index","to","id","thumbnail","title","price","disabled","onClick","Helmet","name","content","AppBanner","axios","_apiBase","_apiKey","response","data","results","character","_transformCharacter","_transformComics","description","path","extension","homepage","urls","url","wiki","items","issueNumber","prices","pageCount"],"sourceRoot":""}