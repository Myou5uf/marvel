{"version":3,"file":"static/js/110.c32a1c9c.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.jsx","hooks/useHttp.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.jsx","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/myForm/MyForm.jsx","pages/CharactersPage.jsx","services/MarvelServices.js"],"sourcesContent":["import React from 'react';\r\nimport img from \"./error.gif\";\r\n\r\nconst ErrorMessage = ({error}) => {\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\", padding: \"5px 10px\"}}>\r\n            <p style={{fontSize: \"24px\", color: \"red\"}}>{error}</p>\r\n            <img\r\n                style={{\r\n                    display: \"block\",\r\n                    width: \"250px\",\r\n                    height: \"250px\",\r\n                    objectFit: \"contain\",\r\n                    margin: \"0 auto\"\r\n                }}\r\n                src={img} alt=\"ErrorPage message\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = (callback) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const fetching = useCallback(async (...args) => {\r\n        try {\r\n            setLoading(true);\r\n            await callback(...args);\r\n        } catch (e) {\r\n            setError(e.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(\"\"), []);\r\n\r\n    return [fetching, loading, error, clearError];\r\n}","import React, {useEffect, useState} from \"react\";\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport MarvelServices from \"../../services/MarvelServices\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport {useHttp} from \"../../hooks/useHttp\";\n\nconst RandomChar = () => {\n\n    const [character, setCharacter] = useState({});\n    let timerId;\n    const [randomFetching, randomLoading, randomError, randomClearError] = useHttp(async () => {\n        randomClearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        const character = await MarvelServices.getCharacter(id);\n        setCharacter(character);\n    });\n\n    const tryItButton = () => {\n        randomFetching();\n    }\n\n    useEffect(() => {\n        randomFetching();\n        timerId = setInterval(randomFetching, 6000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, []);\n\n    const errorMessage = randomError ? <ErrorMessage error={randomError}/> : null;\n    const spinner = randomLoading ? <Spinner/> : null;\n    const content = !(randomLoading || randomError) ? <View character={character}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={tryItButton}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({character}) => {\n    const {name, thumbnail, description, homepage, wiki} = character;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                style={thumbnail?.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null}\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description ? description.slice(0, 120) + \"...\" : \"Нет описания\"}\n\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, { useEffect, useState } from \"react\";\nimport \"./charList.scss\";\nimport MarvelServices from \"../../services/MarvelServices\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nimport { useHttp } from \"../../hooks/useHttp\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nconst CharList = ({ selectedCharacterId, setSelectedCharacterId, setVisibleBgImage }) => {\n    const [characters, setCharacters] = useState([]);\n\n    const [newCharactersLoading, setNewCharactersLoading] = useState(false);\n    const [limit, setLimit] = useState(9);\n    const [offset, setOffset] = useState(210);\n    const [charactersEnded, setCharactersEnded] = useState(false);\n\n    const [charFetching, charLoading, charError] = useHttp(async (limit = 9, offset = 210, initial = false) => {\n        initial ? setNewCharactersLoading(false) : setNewCharactersLoading(true);\n        const characters = await MarvelServices.getCharacters(limit, offset);\n        setNewCharactersLoaded(characters);\n        setNewCharactersLoading(false);\n        setVisibleBgImage(true);\n    });\n\n    useEffect(() => {\n        charFetching(limit, offset, true);\n    }, []);\n\n    const setNewCharactersLoaded = (newCharactersList) => {\n        let ended = false;\n        if (newCharactersList.length < 9) {\n            ended = true;\n        }\n\n        setCharacters((characters) => [...characters, ...newCharactersList]);\n        setOffset((offset) => offset + limit);\n        setCharactersEnded(ended);\n    };\n\n    const errorMessage = charError ? <ErrorMessage error={charError} /> : null;\n    const spinner = charLoading && !newCharactersLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            <View\n                characters={characters}\n                selectedCharacterId={selectedCharacterId}\n                setSelectedCharacterId={setSelectedCharacterId}\n            />\n            <button\n                className=\"button button__main button__long\"\n                disabled={newCharactersLoading}\n                onClick={() => charFetching(limit, offset, false)}\n                style={{ display: charactersEnded ? \"none\" : \"block\" }}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nconst View = ({ characters, selectedCharacterId, setSelectedCharacterId }) => {\n    return (\n        <ul className=\"char__grid\">\n            <TransitionGroup component={null}>\n                {characters.map((character, index) => {\n                    const classes = [\"char__item\"];\n                    if (selectedCharacterId === character.id) classes.push(\"char__item_selected\");\n                    return (\n                        <CSSTransition key={character.id} timeout={500} classNames=\"char__item\">\n                            <li\n                                className={classes.join(\" \")}\n                                tabIndex={index}\n                                onClick={() => setSelectedCharacterId(character.id)}\n                                onKeyDown={(e) => {\n                                    if (e.key === \"Tab\" || e.key === \"Enter\") {\n                                        setSelectedCharacterId(character.id);\n                                    }\n                                }}>\n                                <img\n                                    style={\n                                        character.thumbnail.includes(\"image_not_available\")\n                                            ? { objectFit: \"unset\" }\n                                            : null\n                                    }\n                                    src={character.thumbnail}\n                                    alt=\"abyss\"\n                                />\n                                <div className=\"char__name\">{character.name}</div>\n                            </li>\n                        </CSSTransition>\n                    );\n                })}\n            </TransitionGroup>\n        </ul>\n    );\n};\n\nCharList.propTypes = {\n    setSelectedCharacterId: PropTypes.func,\n    setVisibleBgImage: PropTypes.func,\n};\n\nexport default CharList;\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Можно также сохранить информацию об ошибке в соответствующую службу журнала ошибок\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Можно отрендерить запасной UI произвольного вида\r\n            return <h1>Что-то пошло не так.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, { useEffect, useState } from \"react\";\nimport \"./charInfo.scss\";\nimport MarvelServices from \"../../services/MarvelServices\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport PropTypes from \"prop-types\";\nimport { useHttp } from \"../../hooks/useHttp\";\n\nconst CharInfo = ({ selectedCharacterId }) => {\n    const [character, setCharacter] = useState(null);\n    const [updateCharacter, loading, error, charClearError] = useHttp(async (characterID) => {\n        if (!characterID) {\n            return;\n        }\n        charClearError();\n        const character = await MarvelServices.getCharacter(characterID);\n        setCharacter(character);\n    });\n\n    useEffect(() => {\n        updateCharacter(selectedCharacterId);\n    }, [selectedCharacterId]);\n\n    const skeleton = character || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage error={error} /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !character) ? <View character={character} /> : null;\n    // this.foo.bar = 0; // testing for ErrorBoundary\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n};\n\nconst View = ({ character }) => {\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    style={character.thumbnail?.includes(\"image_not_available\") ? { objectFit: \"contain\" } : null}\n                    src={character.thumbnail}\n                    alt=\"abyss\"\n                />\n                <div>\n                    <div className=\"char__info-name\">{character.name}</div>\n                    <div className=\"char__btns\">\n                        <a href={character.homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={character.wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{character.description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {character.comics.length ? null : \"There is no comics with this character\"}\n                {character.comics.map((item, index) => (\n                    <li key={index} className=\"char__comics-item\">\n                        {item.name}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\nCharInfo.propTypes = {\n    selectedCharacterId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import React, { useState } from \"react\";\r\nimport \"./MyForm.scss\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport { object, string } from \"yup\";\r\nimport { useHttp } from \"../../hooks/useHttp\";\r\nimport MarvelServices from \"../../services/MarvelServices\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ErrorMessage from \"../../components/errorMessage/errorMessage\";\r\n\r\nconst MyForm = () => {\r\n    const [character, setCharacter] = useState(null);\r\n    const [updateCharacter, loading, error, charClearError] = useHttp(async (characterName) => {\r\n        if (!characterName) {\r\n            return;\r\n        }\r\n        charClearError();\r\n        const character = await MarvelServices.getCharacterByName(characterName);\r\n        setCharacter(character);\r\n    });\r\n\r\n    const errorMess = error ? (\r\n        <div className=\"form__error\">\r\n            <ErrorMessage error={error} />\r\n        </div>\r\n    ) : null;\r\n\r\n    const result = !character ? null : character.length > 0 ? (\r\n        <>\r\n            <div className=\"form__success\">There is! Visit {character[0].name} page?</div>\r\n            <Link to={`/characters/${character[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </>\r\n    ) : (\r\n        <div className=\"form__not-found\">The character was not found. Check the name and try again</div>\r\n    );\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: \"\",\r\n            }}\r\n            validationSchema={object({\r\n                name: string().min(1, \"Минимум 1 символ\").required(\"This field is required\"),\r\n            })}\r\n            onSubmit={({ name }) => updateCharacter(name)}>\r\n            <Form className=\"form\">\r\n                <label className=\"form__title\">Or find a character by name:</label>\r\n                <div className=\"form__wrapper\">\r\n                    <Field type=\"text\" name=\"name\" className=\"form__input\" placeholder=\"Enter name\" />\r\n                    <button className=\"button button__main\" type=\"submit\" disabled={loading}>\r\n                        <div className=\"inner\">find</div>\r\n                    </button>\r\n                </div>\r\n                <div className=\"form__result\">\r\n                    {result ? null : <FormikErrorMessage component=\"div\" className=\"form__validate\" name=\"name\" />}\r\n                    {errorMess}\r\n                    {result}\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default MyForm;\r\n","import React, { useState } from \"react\";\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport decoration from \"../resources/img/vision.png\";\r\nimport MyForm from \"../components/myForm/MyForm\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst CharactersPage = () => {\r\n    const [selectedCharacterId, setSelectedCharacterId] = useState(null);\r\n    const [visibleBgImage, setVisibleBgImage] = useState(false);\r\n\r\n    const changeSelectedCharacterId = (id) => setSelectedCharacterId(id);\r\n    const changeVisibleBgImage = (visible) => setVisibleBgImage(visible);\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <RandomChar />\r\n            <div className=\"char__content\">\r\n                <CharList\r\n                    selectedCharacterId={selectedCharacterId}\r\n                    setSelectedCharacterId={changeSelectedCharacterId}\r\n                    setVisibleBgImage={changeVisibleBgImage}\r\n                />\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo selectedCharacterId={selectedCharacterId} />\r\n                    </ErrorBoundary>\r\n                    <div className=\"char__form\" style={{ marginTop: \"30px\" }}>\r\n                        <ErrorBoundary>\r\n                            <MyForm />\r\n                        </ErrorBoundary>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <img\r\n                style={visibleBgImage ? null : { display: \"none\" }}\r\n                className=\"bg-decoration\"\r\n                src={decoration}\r\n                alt=\"vision\"\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharactersPage;\r\n","import axios from \"axios\";\r\n\r\nexport default class MarvelServices {\r\n    static _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    static _apiKey = \"apikey=14c80cf078481fb3ded0db419a38bd66\";\r\n\r\n    static async getCharacters(limit = 9, offset = 210) {\r\n        const response = await axios.get(\r\n            `${MarvelServices._apiBase}characters?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`\r\n        );\r\n        return response.data.data.results.map((character) => MarvelServices._transformCharacter(character));\r\n    }\r\n\r\n    static async getCharacter(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters/${id}?${MarvelServices._apiKey}`);\r\n        return MarvelServices._transformCharacter(response.data.data.results[0]);\r\n    }\r\n\r\n    static async getCharacterByName(name) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters?name=${name}&${MarvelServices._apiKey}`);\r\n        return response.data.data.results;\r\n    }\r\n\r\n    static async getAllComics(limit = 8, offset = 210) {\r\n        const response = await axios.get(\r\n            `${MarvelServices._apiBase}comics?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`\r\n        );\r\n        return response.data.data.results.map((comics) => MarvelServices._transformComics(comics));\r\n    }\r\n\r\n    static async getComics(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}comics/${id}?${MarvelServices._apiKey}`);\r\n        return MarvelServices._transformComics(response.data.data.results[0]);\r\n    }\r\n\r\n    static _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items,\r\n        };\r\n    };\r\n\r\n    static _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            issueNumber: comics.issueNumber,\r\n            description: comics.description,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price,\r\n            pageCount: comics.pageCount,\r\n        };\r\n    };\r\n}\r\n"],"names":["error","style","display","flexDirection","alignItems","padding","fontSize","color","width","height","objectFit","margin","src","img","alt","useHttp","callback","useState","loading","setLoading","setError","fetching","useCallback","message","View","character","name","thumbnail","description","homepage","wiki","className","includes","slice","href","timerId","setCharacter","randomClearError","id","Math","floor","random","MarvelServices","randomFetching","randomLoading","randomError","useEffect","setInterval","clearInterval","errorMessage","spinner","Spinner","content","onClick","mjolnir","characters","selectedCharacterId","setSelectedCharacterId","TransitionGroup","component","map","index","classes","push","CSSTransition","timeout","classNames","join","tabIndex","onKeyDown","e","key","setVisibleBgImage","setCharacters","newCharactersLoading","setNewCharactersLoading","limit","offset","setOffset","charactersEnded","setCharactersEnded","initial","setNewCharactersLoaded","charFetching","charLoading","charError","newCharactersList","ended","length","disabled","props","state","hasError","errorInfo","console","log","this","children","React","comics","item","characterID","charClearError","updateCharacter","skeleton","characterName","errorMess","result","to","initialValues","validationSchema","object","string","min","required","onSubmit","type","placeholder","visibleBgImage","Helmet","visible","marginTop","decoration","axios","_apiBase","_apiKey","response","data","results","_transformCharacter","_transformComics","path","extension","urls","url","items","title","issueNumber","price","prices","pageCount"],"sourceRoot":""}