{"version":3,"file":"static/js/671.a8e1eb74.chunk.js","mappings":"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","sources":["components/errorMessage/errorMessage.jsx","hooks/useHttp.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.jsx","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","pages/CharactersPage.jsx","services/MarvelServices.js"],"sourcesContent":["import React from 'react';\r\nimport img from \"./error.gif\";\r\n\r\nconst ErrorMessage = ({error}) => {\r\n    return (\r\n        <div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\", padding: \"5px 10px\"}}>\r\n            <p style={{fontSize: \"24px\", color: \"red\"}}>{error}</p>\r\n            <img\r\n                style={{\r\n                    display: \"block\",\r\n                    width: \"250px\",\r\n                    height: \"250px\",\r\n                    objectFit: \"contain\",\r\n                    margin: \"0 auto\"\r\n                }}\r\n                src={img} alt=\"ErrorPage message\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;","import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = (callback) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const fetching = useCallback(async (...args) => {\r\n        try {\r\n            setLoading(true);\r\n            await callback(...args);\r\n        } catch (e) {\r\n            setError(e.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(\"\"), []);\r\n\r\n    return [fetching, loading, error, clearError];\r\n}","import React, {useEffect, useState} from \"react\";\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport MarvelServices from \"../../services/MarvelServices\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport {useHttp} from \"../../hooks/useHttp\";\n\nconst RandomChar = () => {\n\n    const [character, setCharacter] = useState({});\n    let timerId;\n    const [randomFetching, randomLoading, randomError, randomClearError] = useHttp(async () => {\n        randomClearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        const character = await MarvelServices.getCharacter(id);\n        setCharacter(character);\n    });\n\n    const tryItButton = () => {\n        randomFetching();\n    }\n\n    useEffect(() => {\n        randomFetching();\n        timerId = setInterval(randomFetching, 6000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, []);\n\n    const errorMessage = randomError ? <ErrorMessage error={randomError}/> : null;\n    const spinner = randomLoading ? <Spinner/> : null;\n    const content = !(randomLoading || randomError) ? <View character={character}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={tryItButton}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({character}) => {\n    const {name, thumbnail, description, homepage, wiki} = character;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                style={thumbnail?.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null}\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description ? description.slice(0, 120) + \"...\" : \"Нет описания\"}\n\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, {useEffect, useState} from \"react\";\nimport './charList.scss';\nimport MarvelServices from \"../../services/MarvelServices\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport PropTypes from \"prop-types\";\nimport {useHttp} from \"../../hooks/useHttp\";\n\nconst CharList = ({selectedCharacterId, setSelectedCharacterId, setVisibleBgImage}) => {\n\n    const [characters, setCharacters] = useState([]);\n\n    const [newCharactersLoading, setNewCharactersLoading] = useState(false);\n    const [limit, setLimit] = useState(9);\n    const [offset, setOffset] = useState(210);\n    const [charactersEnded, setCharactersEnded] = useState(false);\n\n    const [charFetching, charLoading, charError] = useHttp(async (limit = 9, offset = 210, initial = false) => {\n        initial ? setNewCharactersLoading(false) : setNewCharactersLoading(true);\n        const characters = await MarvelServices.getCharacters(limit, offset);\n        setNewCharactersLoaded(characters);\n        setNewCharactersLoading(false);\n        setVisibleBgImage(true);\n    });\n\n    useEffect(() => {\n        charFetching(limit, offset, true);\n    }, []);\n\n    const setNewCharactersLoaded = (newCharactersList) => {\n        let ended = false;\n        if (newCharactersList.length < 9) {\n            ended = true;\n        }\n\n        setCharacters(characters => [...characters, ...newCharactersList]);\n        setOffset(offset => offset + limit);\n        setCharactersEnded(ended);\n    }\n\n    const errorMessage = charError ? <ErrorMessage error={charError}/> : null;\n    const spinner = charLoading && !newCharactersLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            <View characters={characters} selectedCharacterId={selectedCharacterId}\n                  setSelectedCharacterId={setSelectedCharacterId}/>\n            <button\n                className=\"button button__main button__long\"\n                disabled={newCharactersLoading}\n                onClick={() => charFetching(limit, offset, false)}\n                style={{display: charactersEnded ? \"none\" : \"block\"}}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n}\n\nconst View = ({characters, selectedCharacterId, setSelectedCharacterId}) => {\n\n    return (\n        <ul className=\"char__grid\">\n            {characters.map((character, index) => {\n                    const classes = [\"char__item\"];\n                    if (selectedCharacterId === character.id) classes.push(\"char__item_selected\");\n                    return (\n                        <li\n                            className={classes.join(\" \")}\n                            key={character.id}\n                            tabIndex={index}\n                            onClick={() => setSelectedCharacterId(character.id)}\n                            onKeyDown={(e) => {\n                                if (e.key === \"Tab\" || e.key === \"Enter\") {\n                                    setSelectedCharacterId(character.id);\n                                }\n                            }}\n                        >\n                            <img\n                                style={character.thumbnail.includes(\"image_not_available\") ? {objectFit: \"unset\"} : null}\n                                src={character.thumbnail}\n                                alt=\"abyss\"\n                            />\n                            <div className=\"char__name\">{character.name}</div>\n                        </li>\n                    )\n                }\n            )}\n        </ul>\n    )\n}\n\nCharList.propTypes = {\n    setSelectedCharacterId: PropTypes.func,\n    setVisibleBgImage: PropTypes.func\n}\n\nexport default CharList;","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Обновить состояние с тем, чтобы следующий рендер показал запасной UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // Можно также сохранить информацию об ошибке в соответствующую службу журнала ошибок\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // Можно отрендерить запасной UI произвольного вида\r\n            return <h1>Что-то пошло не так.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import React, {useEffect, useState} from \"react\";\nimport './charInfo.scss';\nimport MarvelServices from \"../../services/MarvelServices\";\nimport ErrorMessage from \"../errorMessage/errorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport Skeleton from \"../skeleton/Skeleton\";\nimport PropTypes from 'prop-types';\nimport {useHttp} from \"../../hooks/useHttp\";\n\nconst CharInfo = ({selectedCharacterId}) => {\n    const [character, setCharacter] = useState(null);\n    const [updateCharacter, loading, error, charClearError] = useHttp(async (characterID) => {\n        if (!characterID) {\n            return;\n        }\n        charClearError();\n        const character = await MarvelServices.getCharacter(characterID);\n        setCharacter(character);\n    });\n\n    useEffect(() => {\n        updateCharacter(selectedCharacterId);\n    }, [selectedCharacterId]);\n\n    const skeleton =  character || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage error={error}/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !character) ? <View character={character}/> : null;\n    // this.foo.bar = 0; // testing for ErrorBoundary\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n}\n\n\nconst View = ({character}) => {\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    style={character.thumbnail?.includes(\"image_not_available\") ? {objectFit: \"contain\"} : null}\n                    src={character.thumbnail}\n                    alt=\"abyss\"\n                />\n                <div>\n                    <div className=\"char__info-name\">{character.name}</div>\n                    <div className=\"char__btns\">\n                        <a href={character.homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={character.wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {character.description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {character.comics.length ? null : \"There is no comics with this character\"}\n                {character.comics.map((item, index) =>\n                    <li key={index} className=\"char__comics-item\">\n                        {item.name}\n                    </li>\n                )}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    selectedCharacterId: PropTypes.number,\n}\n\nexport default CharInfo;","import React, {useState} from 'react';\r\nimport RandomChar from \"../components/randomChar/RandomChar\";\r\nimport CharList from \"../components/charList/CharList\";\r\nimport ErrorBoundary from \"../components/errorBoundary/ErrorBoundary\";\r\nimport CharInfo from \"../components/charInfo/CharInfo\";\r\nimport decoration from \"../resources/img/vision.png\";\r\n\r\nconst CharactersPage = () => {\r\n\r\n    const [selectedCharacterId, setSelectedCharacterId] = useState(null);\r\n    const [visibleBgImage, setVisibleBgImage] = useState(false);\r\n\r\n    const changeSelectedCharacterId = (id) => setSelectedCharacterId(id);\r\n    const changeVisibleBgImage = (visible) => setVisibleBgImage(visible);\r\n\r\n    return (\r\n        <>\r\n            <RandomChar/>\r\n            <div className=\"char__content\">\r\n                <CharList selectedCharacterId={selectedCharacterId}\r\n                          setSelectedCharacterId={changeSelectedCharacterId}\r\n                          setVisibleBgImage={changeVisibleBgImage}/>\r\n                <ErrorBoundary>\r\n                    <CharInfo selectedCharacterId={selectedCharacterId}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img style={visibleBgImage ? null : {display: \"none\"}} className=\"bg-decoration\" src={decoration}\r\n                 alt=\"vision\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharactersPage;","import axios from \"axios\";\r\n\r\nexport default class MarvelServices {\r\n    static _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    static _apiKey = \"apikey=14c80cf078481fb3ded0db419a38bd66\";\r\n\r\n    static async getCharacters(limit = 9, offset = 210) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`);\r\n        return response.data.data.results.map(character => MarvelServices._transformCharacter(character));\r\n    }\r\n\r\n    static async getCharacter(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}characters/${id}?${MarvelServices._apiKey}`);\r\n        return MarvelServices._transformCharacter(response.data.data.results[0]);\r\n    }\r\n\r\n    static async getAllComics(limit = 8, offset = 210) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}comics?limit=${limit}&offset=${offset}&${MarvelServices._apiKey}`);\r\n        return response.data.data.results.map(comics => MarvelServices._transformComics(comics));\r\n    }\r\n\r\n    static async getComics(id) {\r\n        const response = await axios.get(`${MarvelServices._apiBase}comics/${id}?${MarvelServices._apiKey}`);\r\n        console.log(response.data.data.results[0]);\r\n        return MarvelServices._transformComics(response.data.data.results[0]);\r\n    }\r\n\r\n    static _transformCharacter = (character) => {\r\n        return {\r\n            id: character.id,\r\n            name: character.name,\r\n            description: character.description,\r\n            thumbnail: character.thumbnail.path + \".\" + character.thumbnail.extension,\r\n            homepage: character.urls[0].url,\r\n            wiki: character.urls[1].url,\r\n            comics: character.comics.items\r\n        }\r\n    }\r\n\r\n    static _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            issueNumber: comics.issueNumber,\r\n            description: comics.description,\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            homepage: comics.urls[0].url,\r\n            price: comics.prices[0].price,\r\n            pageCount: comics.pageCount,\r\n        }\r\n    }\r\n}"],"names":["error","style","display","flexDirection","alignItems","padding","fontSize","color","width","height","objectFit","margin","src","img","alt","useHttp","callback","useState","loading","setLoading","setError","fetching","useCallback","message","View","character","name","thumbnail","description","homepage","wiki","className","includes","slice","href","timerId","setCharacter","randomClearError","id","Math","floor","random","MarvelServices","randomFetching","randomLoading","randomError","useEffect","setInterval","clearInterval","errorMessage","spinner","Spinner","content","onClick","mjolnir","characters","selectedCharacterId","setSelectedCharacterId","map","index","classes","push","join","tabIndex","onKeyDown","e","key","setVisibleBgImage","setCharacters","newCharactersLoading","setNewCharactersLoading","limit","offset","setOffset","charactersEnded","setCharactersEnded","initial","setNewCharactersLoaded","charFetching","charLoading","charError","newCharactersList","ended","length","disabled","props","state","hasError","errorInfo","console","log","this","children","React","comics","item","characterID","charClearError","updateCharacter","skeleton","visibleBgImage","visible","decoration","axios","_apiBase","_apiKey","response","data","results","_transformCharacter","_transformComics","path","extension","urls","url","items","title","issueNumber","price","prices","pageCount"],"sourceRoot":""}